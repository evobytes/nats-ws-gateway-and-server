name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:

  # Job 1: Discover all binaries in the cmd/ directory
  discover-commands:
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.discover.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Discover commands
        id: discover
        run: |
          COMMANDS=$(ls -d cmd/*/ | xargs -n 1 basename | jq -R '{"app_name": .}' | jq -s -c .)
          echo "Discovered commands: $COMMANDS"
          echo "matrix=$COMMANDS" >> "$GITHUB_OUTPUT"

  # Job 2: Build and Package all commands for all target platforms
  build-and-package:
    needs: [discover-commands]
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        command: ${{ fromJson(needs.discover-commands.outputs.matrix) }}
        goos: [linux, windows]
        goarch: amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'
      - name: Build ${{ matrix.command.app_name }} for ${{ matrix.goos }}-${{ matrix.goarch }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          APP_NAME: ${{ matrix.command.app_name }}
        run: |
          make build

      - name: Install FPM
        if: matrix.goos == 'linux' && startsWith(github.ref, 'refs/tags/')
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby-dev build-essential rpm
          sudo gem install --no-document fpm

      - name: Create Linux packages for ${{ matrix.command.app_name }} (${{ matrix.goarch }})
        if: matrix.goos == 'linux' && startsWith(github.ref, 'refs/tags/')
        env:
          APP_NAME: ${{ matrix.command.app_name }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ github.ref_name }}
        run: |
          echo "Packaging version: $VERSION"
          STAGING_DIR="$PWD/dist/$APP_NAME"
          mkdir -p "$STAGING_DIR/usr/bin"
          mkdir -p "$STAGING_DIR/usr/lib/systemd/system"
          mkdir -p ./.build
          cp "bin/${{ matrix.goos }}-${{ matrix.goarch }}/${{ matrix.command.app_name }}" "$STAGING_DIR/usr/bin/${{ matrix.command.app_name }}"
          cp ".github/templates/$APP_NAME.service" "$STAGING_DIR/usr/lib/systemd/system/$APP_NAME.service"
          cp ".github/templates/$APP_NAME.postinst.sh" ./.build/postinst.sh
          find "$STAGING_DIR" -type f
          fpm \
            -s dir \
            -t deb \
            --name "$APP_NAME" \
            --version "${VERSION#v}" \
            --architecture "${GOARCH}" \
            --description "Description for $APP_NAME" \
            --maintainer "Dave Bevan <dave.bevan@evobytes.co.uk>" \
            --url "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY" \
            --license "MIT" \
            --after-install ./.build/postinst.sh \
            -C "$STAGING_DIR" .
          RPM_ARCH="${GOARCH}"
          if [ "$GOARCH" = "arm64" ]; then RPM_ARCH="aarch64"; fi
          fpm \
            -s dir \
            -t rpm \
            --name "$APP_NAME" \
            --version "${VERSION#v}" \
            --architecture "${RPM_ARCH}" \
            --description "Description for $APP_NAME" \
            --maintainer "Dave Bevan <dave.bevan@evobytes.co.uk>" \
            --url "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY" \
            --license "MIT" \
            --after-install ./.build/postinst.sh \
            -C "$STAGING_DIR" .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: |
            bin/${{ matrix.goos }}-${{ matrix.goarch }}/${{ matrix.command.app_name }}*
            *.deb
            *.rpm
          name: ${{ matrix.command.app_name }}-${{ matrix.goos }}-${{ matrix.goarch }}-artifacts
          overwrite: true

  # Job 3: Consolidate all artifacts and create a GitHub Release
  release:
    needs: [discover-commands, build-and-package]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-24.04
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*.deb
            artifacts/**/*.rpm
            artifacts/**/*.exe
          body: |
            Automated release for version ${{ github.ref_name }}.
