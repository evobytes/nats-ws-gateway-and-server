name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: windows
            goarch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'

      - name: Build for ${{ matrix.goos }}-${{ matrix.goarch }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          SAVEAS=nats-ws-gateway-and-server
          [[ "$GOOS" == "windows" ]] && SAVEAS=nats-ws-gateway-and-server.exe
          mkdir -p bin/${GOOS}-${GOARCH}
          make build
          mv bin/${SAVEAS} bin/${GOOS}-${GOARCH}/${SAVEAS}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          path: bin/${{ matrix.goos }}-${{ matrix.goarch }}/nats-ws-gateway-and-server*
          name: nats-ws-gateway-and-server-${{ matrix.goos }}-${{ matrix.goarch }}

  package:
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download compiled binary
        uses: actions/download-artifact@v4
        with:
          name: nats-ws-gateway-and-server-${{ matrix.goarch }}
          path: bin

      - name: Move and verify binary
        run: |
          mv bin/nats-ws-gateway-and-server bin/nats-ws-gateway-and-server-${{ matrix.goarch }}
          test -f bin/nats-ws-gateway-and-server-${{ matrix.goarch }}

      - name: Install FPM
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby-dev build-essential
          sudo gem install --no-document fpm

      - name: Create Linux packages for ${{ matrix.goarch }}
        run: |
          VERSION=$(echo ${{ github.ref }} | sed -e 's|refs/tags/v||')
          echo "Packaging version: $VERSION"

          STAGING_DIR="$PWD/dist"
          mkdir -p "$STAGING_DIR/usr/bin"
          mkdir -p "$STAGING_DIR/usr/lib/systemd/system"
          mkdir -p ./.build

          echo "::group::Verifying presence of systemd service file"
          ls -l .github/templates/
          cat .github/templates/nats-ws-gateway-and-server.service || {
            echo "::error::Missing or unreadable service file"
            exit 1
          }
          echo "::endgroup::"

          echo "::group::Copying files to staging area"
          cp bin/nats-ws-gateway-and-server-${{ matrix.goarch }} "$STAGING_DIR/usr/bin/nats-ws-gateway-and-server"
          cp .github/templates/nats-ws-gateway-and-server.service "$STAGING_DIR/usr/lib/systemd/system/nats-ws-gateway-and-server.service"
          cp .github/templates/postinst.sh ./.build/postinst.sh
          find "$STAGING_DIR" -type f
          echo "::endgroup::"

          fpm \
            -s dir \
            -t deb \
            --name nats-ws-gateway-and-server \
            --version "$VERSION" \
            --architecture ${{ matrix.goarch }} \
            --description "NATS.io WebSocket Gateway and Embedded Server" \
            --maintainer "Dave Bevan <dave.bevan@evobytes.co.uk>" \
            --url "https://github.com/evobytes/nats-ws-gateway-and-server" \
            --license "MIT" \
            --after-install ./.build/postinst.sh \
            -C "$STAGING_DIR" \
            usr/bin/nats-ws-gateway-and-server \
            usr/lib/systemd/system/nats-ws-gateway-and-server.service

          fpm \
            -s dir \
            -t rpm \
            --name nats-ws-gateway-and-server \
            --version "$VERSION" \
            --architecture ${{ matrix.goarch }} \
            --description "NATS.io WebSocket Gateway and Embedded Server" \
            --maintainer "Dave Bevan <dave.bevan@evobytes.co.uk>" \
            --url "https://github.com/evobytes/nats-ws-gateway-and-server" \
            --license "MIT" \
            --after-install ./.build/postinst.sh \
            -C "$STAGING_DIR" \
            usr/bin/nats-ws-gateway-and-server \
            usr/lib/systemd/system/nats-ws-gateway-and-server.service

      - name: List generated packages
        run: ls -lh *.deb *.rpm

      - name: Upload .deb and .rpm artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nats-ws-gateway-and-server-packages-${{ matrix.goarch }}
          path: |
            *.deb
            *.rpm

  release:
    needs: [package]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-24.04
    steps:
      - name: Download all packages
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/nats-ws-gateway-and-server-packages-amd64/*.deb
            artifacts/nats-ws-gateway-and-server-packages-amd64/*.rpm
            artifacts/nats-ws-gateway-and-server-packages-arm64/*.deb
            artifacts/nats-ws-gateway-and-server-packages-arm64/*.rpm
          body: |
            Automated release of nats-ws-gateway-and-server packages for version ${{ github.ref_name }}.

  release-windows:
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-24.04
    steps:
      - name: Download Windows binary
        uses: actions/download-artifact@v4
        with:
          name: nats-ws-gateway-and-server-windows-amd64
          path: bin

      - name: Create GitHub Release with Windows binary
        uses: softprops/action-gh-release@v2
        with:
          files: bin/nats-ws-gateway-and-server.exe
          body: |
            Automated release of nats-ws-gateway-and-server packages for version ${{ github.ref_name }}.

